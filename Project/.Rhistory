shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
?getMapData
??getMapData
library(leaflet)
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
?contour
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
library(sp)
?spTransform
library(rgdal)
?coordinates
coordinates(windSpeeds)=~lon+lat
dat2<-spTransform(windSpeeds)
p4 = "+proj=lcc +lat_1=50  +lat_2=50 +lat_0=0  +lon_0=253 +x_0=0  +y_0=0"
dat2<-spTransform(windSpeeds,CRS(p4))
proj4string(windSpeeds)=CRS("+init=epsg:4326")
dat2<-spTransform(windSpeeds,CRS(p4))
bb=bbox(dat2)
lonx=seq(bb[1,1],  bb[1,2],len=277)
laty=seq(bb[2,1], bb[2,2],len=349)
r=raster(list(x=laty,y=lonx,z=md))
plot(r)
contour(r,add=TRUE)
bb=bbox(dat2)
lonx=seq(bb[1,1],  bb[1,2],len=277)
laty=seq(bb[2,1], bb[2,2],len=349)
r=raster(list(x=laty,y=lonx,z=ws10))
plot(r)
contour(r,add=TRUE)
bb=bbox(dat2)
lonx=seq(bb[1,1],  bb[1,2],len=277)
laty=seq(bb[2,1], bb[2,2],len=349)
r=raster(list(x=laty,y=lonx,z=ws))
plot(r)
contour(r,add=TRUE)
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
coordinates(windSpeeds)=~lon+lat
dat2<-spTransform(windSpeeds)
proj4string(windSpeeds)=CRS("+init=epsg:4326")
dat2<-spTransform(windSpeeds,CRS(p4))
dat2<-fortify(dat2)
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
rm(dat2)
rm(laty,latx)
rm(lonx)
rm(bb)
rm(p4)
?addRasterImage
?addRectangles
addPolygons(map, lng = NULL, lat = NULL, layerId = NULL, group = NULL, stroke = TRUE,
color = "#03F", weight = 5, opacity = 0.5, fill = TRUE, fillColor = color,
fillOpacity = 0.2, dashArray = NULL, smoothFactor = 1, noClip = FALSE,
popup = NULL, options = pathOptions(), data = getMapData(map))
SPDF = SpatialPolygonsDataFrame(SPs, data.frame(N = c("one", "two"), row.names = c("a", "b")))
?SpatialPolygonsDataFrame
dat<-windSpeeds
coordinates(dat)=~lon+lat
proj4string(dat)=CRS("+init=epsg:4326")
dat2=spTransform(dat,CRS(p4))
p4 = "+proj=lcc +lat_1=50  +lat_2=50 +lat_0=0  +lon_0=253 +x_0=0  +y_0=0"
coordinates(dat)=~lon+lat
proj4string(dat)=CRS("+init=epsg:4326")
dat2=spTransform(dat,CRS(p4))
dat<-windSpeeds
coordinates(dat)=~lon+lat
proj4string(dat)=CRS("+init=epsg:4326")
dat2=spTransform(dat,CRS(p4))
?addPolygons
dat<-windSpeeds
coordinate(data)=~lon+lat
coordinates(dat)=~lon+lat
latlong = "+init=epsg:4326"
dat2=spTransform(dat,CRS(latlong))
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
unique(powerCurves[powerCurves$turbine=="E3120",powerCurves$hmin])
powerCurves[powerCurves$turbine=="E3120",powerCurves$hmin]
powerCurves[,powerCurves$hmin]
powerCurves[,hmin]
powerCurves[,2]
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
rm(list=ls())
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
?sprintf
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
devtool::install_github("rstudio/shiny")
install.packages("devtool")
library(devtools)
devtool::install_github("rstudio/shiny")
devtools::install_github("rstudio/shiny")
install.packages("jsonlite")
library(shiny)
install.packages("shiny")
install.packages("shiny")
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
library(Rcpp)
library(shiny)
install.packages("Rcpp")
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/shiny-examples/019-mathjax')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
sessionInfo
sessionInfo()
?mathjax
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
library(shiny)
server <- function(input, output, session) {
output$formula <- renderUI({
print("$$x = \\frac{-b\\pm\\sqrt{b^2 - 4ac}}{2a}$$")
})
}
ui <- fluidPage(
titlePanel("Quadratic Equation Roots"),
sidebarLayout(
sidebarPanel("LaTeX: $$x = \\frac{-b\\pm\\sqrt{b^2 - 4ac}}{2a}$$"),
mainPanel(withMathJax(uiOutput("formula")))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
server <- function(input, output, session) {
output$formula <- renderUI({
print("$$x = \\frac{-b\\pm\\sqrt{b^2 - 4ac}}{2a}$$")
})
}
ui <- fluidPage(
titlePanel("Quadratic Equation Roots"),
sidebarLayout(
sidebarPanel("LaTeX: (enclose in $$) x = \\frac{-b\\pm\\sqrt{b^2 - 4ac}}{2a}"),
mainPanel(withMathJax(uiOutput("formula")))
)
)
shinyApp(ui = ui, server = server)
library(shiny)
server <- function(input, output, session) {
output$formula <- renderUI({
print("$$x = \\frac{-b\\pm\\sqrt{b^2 - 4ac}}{2a}$$")
})
}
ui <- fluidPage(
titlePanel("Quadratic Equation Roots"),
sidebarLayout(
sidebarPanel("LaTeX: (enclose in $$) x = \\frac{-b\\pm\\sqrt{b^2 - 4ac}}{2a}"),
mainPanel(withMathJax(uiOutput("formula")))
)
)
shinyApp(ui = ui, server = server)
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='mbh038', token='AE8A1EFE40AA5F2D38DA81CF271A185B', secret='YDcDIbZzb242yAYVWyzEVU05qYeNszIKUoY/Dd0H')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
library(shinyapps)
shinyapps::deployApp('c:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
shiny::runApp('C:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
library(shinyapps)
shinyapps::deployApp('c:/Users/Mike/Rspace/JHU_DDP/Project/Shiny')
pnorm(1800,1500,300)
pnorm(24,21,5)
?qnorm
qnorm(.9,1500,300)
qnorm(.1,21,5)
pnorm(50,45,3.2)
qnorm(50,45,3.2)
pnorm(50,45,3.2,FALSE)
qnorm(0.2,77,5)
qnorm(1)
pnorm(1)
qx<_seq(-5,5,.1)
qx<-seq(-5,5,.1)
px<-pnorm(qx)
plot(px,qx)
pnorm(1)
pnorm(-1)
qnorm(2)
rm(list=ls())
z<-seq(-5,5,.1)
sd=1
xbar=0
x<-xbar+sd*z
plot(z,x)
x<-dnorm(z)
hist(x)
plot(x)
plot(x,z)
plot(z,x)
?qq
rm(list=ls())
x=seq(-5,5,.1)
z=dnorm(x)
plot(x,z)
qz<-pnorm(z)
plot(qz)
plot(z)
str(z)
qx<-pnorm(x)
str(x)
str(qx)
summary(x)
summary(qz)
summary(qx)
plot(qx,qz)
plot(x,z)
plot(x,qz)
qx<-pnorm(x)
plot(x,qx)
data<-pnorm(x)+0.1*dnorm(x)
plot(data)
plot(x,data)
data<-dnorm(x)
plot(data)
data<-data
data<-data+0.1*rnorm(x)
plot(x,data)
plot(x,qx)
plot(x)
qdata<-pnorm(data)
plot(x,qdata)
plot(qx,qdata)
data<-dnorm(x)+0.05*rnorm(x)
plot(x,data)
plot(qx,x)
plot(x,qx)
?quantile
quantile(data)
plot(x,data)
qdat<-quantile(data)
plot(qx,qdat)
qdata<-quantile(data,seq(0,1,.01))
plot(qx,qdata)
plot(x,qdata)
?qqplot
qqplot(data)
qqnorm(data)
qqnorm(dnorm(x))
qqnorm(x)
data<-dnorm(x)
plot(x,data)
qqnorm(z)
pnorm(1)
pnorm(1,FALSE)
pnorm(1,true)
pnorm(1,TRUE)
pnorm(0)
pnorm(1)
pnorm(50,160*0.28,sqrt(160*0.28*0.72))
pnorm(0.92)
rm(list=ls())
load(url("http://www.openintro.org/stat/data/kobe.RData"))
head(kobe)
kobe$basket[1:9]
str(kobe)
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
median(kobe_streak)
boxplot(kobe_streak)
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
kobe$basket
sim_basket
sim_basket <- sample(outcomes, size = 133, replace = TRUE,prob=c(0.45,0.55))
kobe$basket
sim_basket
sim_streak <- calc_streak(sim_basket)
barplot(table(sim_streak))
median(sim_streak)
boxplot(sim_streak)
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap")
install.packages(x) # warning: this may take a number of minutes
lapply(x, library, character.only = TRUE) # load the required packages
pnorm(.98)
?pnorm
pnorm(.975)
pnorm(0.95)
qnorm(0.975)
qnorm(0.99)
qnorm(0.98)
pnorm(0.995)
qnorm(0.995)
qnorm(0.99)
qnorm(0.95)
0.48+qnorm(0.95)*.05
0.48+c(-1,1)*qnorm(0.95)*.05
qnorm(.975)
134+c(-1,1)*qnorm(0.95)*17/sqrt(35)
pnorm(1.39)
415+c(-1,1)*qnorm(0.975)*220/10
setwd("C:/Users/Mike/Rspace/DASI/Project")
df<-read.csv("CSV_DC2202EW_2011HTWARDH_NAT_HTWD_REL_1.1.1_EN.csv")
str(df)
df<-read.table("CSV_DC2202EW_2011HTWARDH_NAT_HTWD_REL_1.1.1_EN.csv")
str(df)
df<-read.table("CSV_DC2202EW_2011HTWARDH_NAT_HTWD_REL_1.1.1_EN.csv",skip=1)
str(df)
df<-load(url("http://bit.ly/dasi_anes_data"))
str(df)
str(df)
rm(list=ls())
load(url("http://bit.ly/dasi_anes_data"))
class(anes)
load(url("http://bit.ly/dasi_anes_data"))
df<-cbind(anes$INCGROUP_PREPOST)
df<-cbind(anes$incgroup_prepost)
df<-cbind(anes$incgroup_prepost,anes$health_insurance)
df<-cbind(anes$incgroup_prepost,anes$health_insured)
df<-cbind(anes$incgroup_prepost,anes$health_insured)
str(df)
summary(df)
class(anes$incgroup_prepost)
class(anes$health_insured)
df<-cbind(as.numeric(anes$incgroup_prepost),as.numeric(anes$health_insured)
str(df)
df<-cbind(as.numeric(anes$incgroup_prepost),as.numeric(anes$health_insured))
str(df)
head(df)
summary(df)
df<-cbind(as.numeric(anes$incgroup_prepost),anes$health_insured)
str(df)
summary(df)
df<-cbind(as.numeric(anes$incgroup_prepost),anes$health_insured)
names(df)=c("income","health_insured")
# remove those with incomes over $250000
df<-subset(df,df$income !=28)
class(df)
df<-as.data.frame(cbind(as.numeric(anes$incgroup_prepost),anes$health_insured))
names(df)=c("income","health_insured")
# remove those with incomes over $250000
df<-subset(df,df$income !=28)
summary(df)
df<-as.data.frame(cbind(as.numeric(anes$incgroup_prepost),anes$health_insured))
names(df)=c("income","health_insured")
# remove NAs
df<-subset(df,is.na(df$income)==FALSE & is.na(df$health_insured)==FALSE)
# remove those with incomes over $250000
df<-subset(df,df$income !=28)
summary(df)
str(df)
incomes=c(2500,7500,11250,13750,16250,18750,21250,23750,26250,28750,3250,37500)
rm(list=ls())
incomes=c(2500,7500,11250,13750,16250,18750,21250,23750,26250,28750,3250,37500,
42500,47500,52500,57500.62500,67500,72500,77500,85000,95000,105000,
117500,137500,162500,212500)
for (i in 1:nrow(df) {
df$incomes=incomes(df$income_cat)
}
incomes=c(2500,7500,11250,13750,16250,18750,21250,23750,26250,28750,3250,37500,
42500,47500,52500,57500.62500,67500,72500,77500,85000,95000,105000,
117500,137500,162500,212500)
for (i in 1:nrow(df)) {
df$incomes=incomes(df$income_cat)
}
class(df)
load(url("http://bit.ly/dasi_anes_data"))
df<-as.data.frame(cbind(as.numeric(anes$incgroup_prepost),anes$health_insured))
names(df)=c("income_cat","health_insured")
# remove NAs
df<-subset(df,is.na(df$income_cat)==FALSE & is.na(df$health_insured)==FALSE)
# remove those with incomes over $250000
df<-subset(df,df$income !=28)
incomes=c(2500,7500,11250,13750,16250,18750,21250,23750,26250,28750,3250,37500,
42500,47500,52500,57500.62500,67500,72500,77500,85000,95000,105000,
117500,137500,162500,212500)
for (i in 1:nrow(df)) {
df$incomes=incomes(df$income_cat)
}
incomes=c(2500,7500,11250,13750,16250,18750,21250,23750,26250,28750,3250,37500,
42500,47500,52500,57500.62500,67500,72500,77500,85000,95000,105000,
117500,137500,162500,212500)
for (i in 1:nrow(df)) {
df$incomes=incomes[df$income_cat]
}
summary(df)
length(incomes)
incomes=c(2500,7500,11250,13750,16250,18750,21250,23750,26250,28750,32500,37500,
42500,47500,52500,57500,62500,67500,72500,77500,85000,95000,105000,
117500,137500,162500,212500)
for (i in 1:nrow(df)) {
df$incomes=incomes[df$income_cat]
}
summary(df)
notInsured<-subset(df,health_insured==1)
Insured<-subset(df,health_insured==2)
summary(Insured)
summary(notInsured)
notInsured<-subset(df,health_insured==2)
Insured<-subset(df,health_insured==1)
notInsured<-subset(df,health_insured==2)
Insured<-subset(df,health_insured==1)
boxplot(df,health_insured)
notInsured<-subset(df,health_insured==2)
Insured<-subset(df,health_insured==1)
boxplot(df,df$health_insured)
?box_plot
?boxplot
notInsured<-subset(df,health_insured==2)
Insured<-subset(df,health_insured==1)
boxplot(df~health_insured)
rm(list=ls())
load(url("http://bit.ly/dasi_anes_data"))
df<-as.data.frame(cbind(as.numeric(anes$incgroup_prepost),anes$health_insured))
names(df)=c("income_cat","health_insured")
# remove NAs
df<-subset(df,is.na(df$income_cat)==FALSE & is.na(df$health_insured)==FALSE)
# remove those with incomes over $250000
df<-subset(df,df$income !=28)
income=c(2500,7500,11250,13750,16250,18750,21250,23750,26250,28750,32500,37500,
42500,47500,52500,57500,62500,67500,72500,77500,85000,95000,105000,
117500,137500,162500,212500)
for (i in 1:nrow(df)) {
df$income=income[df$income_cat]
}
notInsured<-subset(df,health_insured==2)
Insured<-subset(df,health_insured==1)
boxplot(income~health_insured,data=df)
hist((income~health_insured,data=df))
library(ggplot2)
boxplot(income~health_insured,data=df)
ggplot(df, aes(x=income)) + geom_histogram()
library(ggplot2)
library("ggmap", lib.loc="~/R/win-library/3.2")
?hist
hist(df$income)
hist(df$income,df$health_insured==2)
hist(df[df$health_insured==1,])
hist(df[df$health_insured==1,df$income])
hist(df[,df$income])
boxplot(income~health_insured,data=df)
summary(subset(df,health_insured==1))
summary(subset(df,health_insured==2))
boxplot(income~health_insured,data=df)
insured<-subset(df,health_insured==1)
notInsured<-subset(df,health_insured==2)
ci95<-mean(insured)+c(-1,1)*qnorm(0.975)*sd(insured)/sqrt(nrow(insured))
boxplot(income~health_insured,data=df)
insured<-subset(df,health_insured==1)
notInsured<-subset(df,health_insured==2)
ci95<-mean(insured)+c(-1,1)*qnorm(0.975)*sd(insured$income)/sqrt(nrow(insured))
boxplot(income~health_insured,data=df)
insured<-subset(df,health_insured==1)
notInsured<-subset(df,health_insured==2)
ci95<-mean(insured$income)+c(-1,1)*qnorm(0.975)*sd(insured$income)/sqrt(nrow(insured))
boxplot(income~health_insured,data=df)
insured<-subset(df,health_insured==1)
notInsured<-subset(df,health_insured==2)
ci95<-mean(insured$income)+c(-1,1)*qnorm(0.975)*sd(insured$income)/sqrt(nrow(insured))
ci95
head(df)
head(df,20)
